import { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { AdvancedSearch, QuickSearch } from '../search/AdvancedSearch'\nimport type { SearchFilter } from '../search/AdvancedSearch'\n\nconst mockFilters: SearchFilter[] = [\n  {\n    id: 'type',\n    label: 'Type',\n    type: 'select',\n    options: [\n      { value: 'gc-cards', label: 'GC Cards' },\n      { value: 'btc-bot', label: 'BTC Bot' },\n      { value: 'algo-trader', label: 'Algo Trader' }\n    ]\n  },\n  {\n    id: 'price',\n    label: 'Price Range',\n    type: 'range',\n    min: 0,\n    max: 10000\n  },\n  {\n    id: 'premium',\n    label: 'Premium Only',\n    type: 'boolean'\n  }\n]\n\ndescribe('Search Components', () => {\n  describe('AdvancedSearch', () => {\n    const mockOnSearch = jest.fn()\n\n    beforeEach(() => {\n      mockOnSearch.mockClear()\n    })\n\n    it('renders search input', () => {\n      render(\n        <AdvancedSearch \n          filters={mockFilters}\n          onSearch={mockOnSearch}\n        />\n      )\n      \n      expect(screen.getByPlaceholderText('Hledat...')).toBeInTheDocument()\n    })\n\n    it('shows filters when filter button is clicked', () => {\n      render(\n        <AdvancedSearch \n          filters={mockFilters}\n          onSearch={mockOnSearch}\n        />\n      )\n      \n      const filterButton = screen.getByText('Filtry')\n      fireEvent.click(filterButton)\n      \n      expect(screen.getByText('Type')).toBeInTheDocument()\n      expect(screen.getByText('Price Range')).toBeInTheDocument()\n      expect(screen.getByText('Premium Only')).toBeInTheDocument()\n    })\n\n    it('calls onSearch when query changes', async () => {\n      render(\n        <AdvancedSearch \n          filters={mockFilters}\n          onSearch={mockOnSearch}\n        />\n      )\n      \n      const searchInput = screen.getByPlaceholderText('Hledat...')\n      fireEvent.change(searchInput, { target: { value: 'test query' } })\n      \n      await waitFor(() => {\n        expect(mockOnSearch).toHaveBeenCalledWith(\n          expect.objectContaining({\n            query: 'test query'\n          })\n        )\n      }, { timeout: 500 })\n    })\n\n    it('handles filter changes', async () => {\n      render(\n        <AdvancedSearch \n          filters={mockFilters}\n          onSearch={mockOnSearch}\n        />\n      )\n      \n      // Open filters\n      fireEvent.click(screen.getByText('Filtry'))\n      \n      // Select a filter option\n      const typeSelect = screen.getByDisplayValue('')\n      fireEvent.change(typeSelect, { target: { value: 'gc-cards' } })\n      \n      await waitFor(() => {\n        expect(mockOnSearch).toHaveBeenCalledWith(\n          expect.objectContaining({\n            filters: expect.objectContaining({\n              type: 'gc-cards'\n            })\n          })\n        )\n      })\n    })\n\n    it('shows active filter chips', async () => {\n      render(\n        <AdvancedSearch \n          filters={mockFilters}\n          onSearch={mockOnSearch}\n        />\n      )\n      \n      // Open filters and set a filter\n      fireEvent.click(screen.getByText('Filtry'))\n      \n      const typeSelect = screen.getByDisplayValue('')\n      fireEvent.change(typeSelect, { target: { value: 'gc-cards' } })\n      \n      await waitFor(() => {\n        expect(screen.getByText(/Type: GC Cards/)).toBeInTheDocument()\n      })\n    })\n\n    it('clears individual filters', async () => {\n      render(\n        <AdvancedSearch \n          filters={mockFilters}\n          onSearch={mockOnSearch}\n        />\n      )\n      \n      // Open filters and set a filter\n      fireEvent.click(screen.getByText('Filtry'))\n      const typeSelect = screen.getByDisplayValue('')\n      fireEvent.change(typeSelect, { target: { value: 'gc-cards' } })\n      \n      // Wait for filter chip to appear\n      await waitFor(() => {\n        expect(screen.getByText(/Type: GC Cards/)).toBeInTheDocument()\n      })\n      \n      // Clear the filter\n      const clearButton = screen.getByRole('button', { name: '' }) // X button\n      fireEvent.click(clearButton)\n      \n      await waitFor(() => {\n        expect(screen.queryByText(/Type: GC Cards/)).not.toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('QuickSearch', () => {\n    const mockOnSearch = jest.fn()\n    const mockSuggestions = ['Bitcoin', 'Ethereum', 'NFT Collection']\n\n    beforeEach(() => {\n      mockOnSearch.mockClear()\n    })\n\n    it('renders search input with placeholder', () => {\n      render(\n        <QuickSearch \n          onSearch={mockOnSearch}\n          placeholder=\"Quick search...\"\n        />\n      )\n      \n      expect(screen.getByPlaceholderText('Quick search...')).toBeInTheDocument()\n    })\n\n    it('shows suggestions when typing', async () => {\n      render(\n        <QuickSearch \n          onSearch={mockOnSearch}\n          suggestions={mockSuggestions}\n        />\n      )\n      \n      const input = screen.getByPlaceholderText('Rychlé hledání...')\n      fireEvent.change(input, { target: { value: 'Bit' } })\n      fireEvent.focus(input)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Bitcoin')).toBeInTheDocument()\n      })\n    })\n\n    it('filters suggestions based on input', async () => {\n      render(\n        <QuickSearch \n          onSearch={mockOnSearch}\n          suggestions={mockSuggestions}\n        />\n      )\n      \n      const input = screen.getByPlaceholderText('Rychlé hledání...')\n      fireEvent.change(input, { target: { value: 'eth' } })\n      fireEvent.focus(input)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Ethereum')).toBeInTheDocument()\n        expect(screen.queryByText('Bitcoin')).not.toBeInTheDocument()\n      })\n    })\n\n    it('calls onSearch when suggestion is clicked', async () => {\n      render(\n        <QuickSearch \n          onSearch={mockOnSearch}\n          suggestions={mockSuggestions}\n        />\n      )\n      \n      const input = screen.getByPlaceholderText('Rychlé hledání...')\n      fireEvent.change(input, { target: { value: 'Bit' } })\n      fireEvent.focus(input)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Bitcoin')).toBeInTheDocument()\n      })\n      \n      fireEvent.click(screen.getByText('Bitcoin'))\n      \n      expect(mockOnSearch).toHaveBeenCalledWith('Bitcoin')\n    })\n\n    it('clears input when clear button is clicked', () => {\n      render(\n        <QuickSearch \n          onSearch={mockOnSearch}\n        />\n      )\n      \n      const input = screen.getByPlaceholderText('Rychlé hledání...')\n      fireEvent.change(input, { target: { value: 'test' } })\n      \n      const clearButton = screen.getByRole('button')\n      fireEvent.click(clearButton)\n      \n      expect(input).toHaveValue('')\n      expect(mockOnSearch).toHaveBeenCalledWith('')\n    })\n  })\n})\n"