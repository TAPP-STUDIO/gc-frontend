import { render, screen, fireEvent } from '@testing-library/react'\nimport { DashboardButton, DashboardCard, StatCard } from '../dashboard'\n\ndescribe('Dashboard Components', () => {\n  describe('DashboardButton', () => {\n    it('renders button with text', () => {\n      render(<DashboardButton>Test Button</DashboardButton>)\n      expect(screen.getByText('Test Button')).toBeInTheDocument()\n    })\n\n    it('handles click events', () => {\n      const handleClick = jest.fn()\n      render(<DashboardButton onClick={handleClick}>Click Me</DashboardButton>)\n      \n      fireEvent.click(screen.getByText('Click Me'))\n      expect(handleClick).toHaveBeenCalledTimes(1)\n    })\n\n    it('applies variant classes correctly', () => {\n      const { container } = render(\n        <DashboardButton variant=\"primary\">Primary Button</DashboardButton>\n      )\n      \n      const button = container.firstChild\n      expect(button).toHaveClass('unified-button')\n    })\n\n    it('handles disabled state', () => {\n      render(<DashboardButton disabled>Disabled Button</DashboardButton>)\n      \n      const button = screen.getByText('Disabled Button')\n      expect(button).toBeDisabled()\n    })\n  })\n\n  describe('DashboardCard', () => {\n    it('renders card with children', () => {\n      render(\n        <DashboardCard>\n          <div>Card Content</div>\n        </DashboardCard>\n      )\n      \n      expect(screen.getByText('Card Content')).toBeInTheDocument()\n    })\n\n    it('applies glass card styling', () => {\n      const { container } = render(\n        <DashboardCard>Test</DashboardCard>\n      )\n      \n      const card = container.firstChild\n      expect(card).toHaveClass('glass-card')\n    })\n\n    it('accepts custom className', () => {\n      const { container } = render(\n        <DashboardCard className=\"custom-class\">Test</DashboardCard>\n      )\n      \n      const card = container.firstChild\n      expect(card).toHaveClass('custom-class')\n    })\n  })\n\n  describe('StatCard', () => {\n    it('renders title and value', () => {\n      render(<StatCard title=\"Test Stat\" value=\"100\" />)\n      \n      expect(screen.getByText('Test Stat')).toBeInTheDocument()\n      expect(screen.getByText('100')).toBeInTheDocument()\n    })\n\n    it('shows trend indicator when provided', () => {\n      render(<StatCard title=\"Test\" value=\"100\" trend=\"up\" />)\n      \n      // Check for trend indicator (this would depend on your implementation)\n      const statCard = screen.getByText('Test').closest('.glass-card')\n      expect(statCard).toBeInTheDocument()\n    })\n\n    it('handles different value types', () => {\n      render(<StatCard title=\"Number Stat\" value={42} />)\n      \n      expect(screen.getByText('42')).toBeInTheDocument()\n    })\n  })\n})\n"