'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { DashboardButton } from '@/components/dashboard';\nimport { nftService, NFTCollectionHistory } from '@/services/nft.service';\n\nexport interface HistoryManagementProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId: string;\n  projectName: string;\n  onHistoryUpdated?: () => void;\n}\n\ninterface EditingHistory {\n  id: string;\n  totalValueUSD: number;\n  reason: string;\n  changeType: string;\n}\n\nexport default function HistoryManagement({\n  isOpen,\n  onClose,\n  projectId,\n  projectName,\n  onHistoryUpdated\n}: HistoryManagementProps) {\n  const [history, setHistory] = useState<NFTCollectionHistory[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [editingRecord, setEditingRecord] = useState<EditingHistory | null>(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load history when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      loadHistory();\n    }\n  }, [isOpen, projectId]);\n\n  const loadHistory = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Get collection ID by symbol (projectId is symbol.toLowerCase())\n      const collectionsResponse = await nftService.getCollections();\n      if (!collectionsResponse.success || !collectionsResponse.data) {\n        throw new Error('Failed to load collections');\n      }\n      \n      const collection = collectionsResponse.data.find(\n        c => c.symbol.toLowerCase() === projectId.toLowerCase()\n      );\n      \n      if (!collection) {\n        throw new Error('Collection not found');\n      }\n\n      // Get history for this collection\n      const historyResponse = await nftService.getCollectionHistory(collection._id, 90); // Last 90 days\n      if (historyResponse.success && historyResponse.data) {\n        setHistory(historyResponse.data.history);\n      }\n    } catch (err: any) {\n      console.error('Failed to load history:', err);\n      setError(err.message || 'Failed to load history');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteRecord = async (historyId: string) => {\n    if (!confirm('Are you sure you want to delete this history record?')) {\n      return;\n    }\n\n    try {\n      // Get collection ID\n      const collectionsResponse = await nftService.getCollections();\n      if (!collectionsResponse.success || !collectionsResponse.data) {\n        throw new Error('Failed to load collections');\n      }\n      \n      const collection = collectionsResponse.data.find(\n        c => c.symbol.toLowerCase() === projectId.toLowerCase()\n      );\n      \n      if (!collection) {\n        throw new Error('Collection not found');\n      }\n\n      const result = await nftService.deleteHistoryRecord(collection._id, historyId);\n      if (result.success) {\n        await loadHistory(); // Reload history\n        onHistoryUpdated?.();\n      } else {\n        setError(result.error || 'Failed to delete record');\n      }\n    } catch (err: any) {\n      console.error('Failed to delete history record:', err);\n      setError(err.message || 'Failed to delete record');\n    }\n  };\n\n  const handleEditRecord = (record: NFTCollectionHistory) => {\n    setEditingRecord({\n      id: record._id,\n      totalValueUSD: record.totalValueUSD,\n      reason: record.reason,\n      changeType: record.changeType\n    });\n    setIsEditModalOpen(true);\n  };\n\n  const handleSaveEdit = async () => {\n    if (!editingRecord) return;\n\n    try {\n      // Get collection ID\n      const collectionsResponse = await nftService.getCollections();\n      if (!collectionsResponse.success || !collectionsResponse.data) {\n        throw new Error('Failed to load collections');\n      }\n      \n      const collection = collectionsResponse.data.find(\n        c => c.symbol.toLowerCase() === projectId.toLowerCase()\n      );\n      \n      if (!collection) {\n        throw new Error('Collection not found');\n      }\n\n      const result = await nftService.updateHistoryRecord(\n        collection._id,\n        editingRecord.id,\n        {\n          totalValueUSD: editingRecord.totalValueUSD,\n          reason: editingRecord.reason,\n          changeType: editingRecord.changeType as any\n        }\n      );\n\n      if (result.success) {\n        setIsEditModalOpen(false);\n        setEditingRecord(null);\n        await loadHistory(); // Reload history\n        onHistoryUpdated?.();\n      } else {\n        setError(result.error || 'Failed to update record');\n      }\n    } catch (err: any) {\n      console.error('Failed to update history record:', err);\n      setError(err.message || 'Failed to update record');\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString('cs-CZ');\n  };\n\n  const getChangeTypeLabel = (changeType: string) => {\n    switch (changeType) {\n      case 'manual_update': return 'Manuální update';\n      case 'automatic_sync': return 'Automatická synchronizace';\n      case 'admin_correction': return 'Admin korekce';\n      case 'initial_value': return 'Počáteční hodnota';\n      default: return changeType;\n    }\n  };\n\n  const getChangeTypeColor = (changeType: string) => {\n    switch (changeType) {\n      case 'manual_update': return 'text-blue-400';\n      case 'automatic_sync': return 'text-green-400';\n      case 'admin_correction': return 'text-yellow-400';\n      case 'initial_value': return 'text-purple-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Main History Modal */}\n      <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-[#1a1a1a] rounded-lg border border-[#333333] max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-[#333333]\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-bold text-white\">\n                Historie změn: {projectName}\n              </h2>\n              <button\n                onClick={onClose}\n                className=\"text-[#666666] hover:text-white transition-colors\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-6\">\n            {error && (\n              <div className=\"bg-red-500/20 border border-red-500/30 rounded-lg p-4 mb-6\">\n                <p className=\"text-red-400\">{error}</p>\n              </div>\n            )}\n\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#F9D523]\"></div>\n              </div>\n            ) : history.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <p className=\"text-[#666666]\">Žádná historie změn nebyla nalezena.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {history.map((record) => (\n                  <div\n                    key={record._id}\n                    className=\"bg-[#2a2a2a] rounded-lg border border-[#333333] p-4\"\n                  >\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-3\">\n                          <div>\n                            <p className=\"text-xs text-[#666666]\">Celková hodnota USD</p>\n                            <p className=\"text-lg font-semibold text-white\">\n                              ${record.totalValueUSD.toLocaleString()}\n                            </p>\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-[#666666]\">Cena za kartu</p>\n                            <p className=\"text-lg font-semibold text-white\">\n                              ${record.pricePerCard.toFixed(2)}\n                            </p>\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-[#666666]\">Typ změny</p>\n                            <p className={`text-sm font-medium ${getChangeTypeColor(record.changeType)}`}>\n                              {getChangeTypeLabel(record.changeType)}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        {record.reason && (\n                          <div className=\"mb-3\">\n                            <p className=\"text-xs text-[#666666]\">Důvod</p>\n                            <p className=\"text-sm text-white\">{record.reason}</p>\n                          </div>\n                        )}\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-xs text-[#666666]\">\n                          <div>\n                            <span>Datum: {formatDate(record.timestamp)}</span>\n                          </div>\n                          <div>\n                            <span>Upravil: {record.updatedBy || 'N/A'}</span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-2 ml-4\">\n                        <DashboardButton\n                          onClick={() => handleEditRecord(record)}\n                          variant=\"outline\"\n                          className=\"border-blue-500/30 text-blue-400 hover:bg-blue-500/20 px-3 py-1 text-xs\"\n                        >\n                          Edit\n                        </DashboardButton>\n                        <DashboardButton\n                          onClick={() => handleDeleteRecord(record._id)}\n                          variant=\"outline\"\n                          className=\"border-red-500/30 text-red-400 hover:bg-red-500/20 px-3 py-1 text-xs\"\n                        >\n                          Delete\n                        </DashboardButton>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Edit History Record Modal */}\n      {isEditModalOpen && editingRecord && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-[60] p-4\">\n          <div className=\"bg-[#1a1a1a] rounded-lg border border-[#333333] max-w-md w-full\">\n            <div className=\"p-6 border-b border-[#333333]\">\n              <h3 className=\"text-lg font-bold text-white\">Editovat historický záznam</h3>\n            </div>\n            \n            <div className=\"p-6 space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-[#666666] mb-2\">\n                  Celková hodnota USD\n                </label>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  value={editingRecord.totalValueUSD}\n                  onChange={(e) => setEditingRecord(prev => prev ? {\n                    ...prev,\n                    totalValueUSD: parseFloat(e.target.value) || 0\n                  } : null)}\n                  className=\"w-full bg-[#2a2a2a] border border-[#333333] rounded-lg px-3 py-2 text-white focus:border-[#F9D523] focus:outline-none\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-[#666666] mb-2\">\n                  Důvod\n                </label>\n                <textarea\n                  value={editingRecord.reason}\n                  onChange={(e) => setEditingRecord(prev => prev ? {\n                    ...prev,\n                    reason: e.target.value\n                  } : null)}\n                  rows={3}\n                  className=\"w-full bg-[#2a2a2a] border border-[#333333] rounded-lg px-3 py-2 text-white focus:border-[#F9D523] focus:outline-none resize-none\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-[#666666] mb-2\">\n                  Typ změny\n                </label>\n                <select\n                  value={editingRecord.changeType}\n                  onChange={(e) => setEditingRecord(prev => prev ? {\n                    ...prev,\n                    changeType: e.target.value\n                  } : null)}\n                  className=\"w-full bg-[#2a2a2a] border border-[#333333] rounded-lg px-3 py-2 text-white focus:border-[#F9D523] focus:outline-none\"\n                >\n                  <option value=\"manual_update\">Manuální update</option>\n                  <option value=\"automatic_sync\">Automatická synchronizace</option>\n                  <option value=\"admin_correction\">Admin korekce</option>\n                  <option value=\"initial_value\">Počáteční hodnota</option>\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"p-6 border-t border-[#333333] flex justify-end gap-3\">\n              <DashboardButton\n                onClick={() => {\n                  setIsEditModalOpen(false);\n                  setEditingRecord(null);\n                }}\n                variant=\"outline\"\n                className=\"border-[#666666] text-[#666666] hover:bg-[#444444]\"\n              >\n                Cancel\n              </DashboardButton>\n              <DashboardButton\n                onClick={handleSaveEdit}\n                variant=\"primary\"\n                className=\"bg-[#F9D523] hover:bg-[#e3c320] text-[#151515]\"\n              >\n                Save Changes\n              </DashboardButton>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n